Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
bbb$observed
bbb$p_value
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_statistic_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
names(bbb)
bbb$observed
bbb$p_value
par(mfrow = c(3, 1))
invisible(lapply(names(bbb$bootstrap_reps), function(name){
this = bbb$bootstrap_reps[[name]]
hist(this, col = "gray", main = name, xlab = "bootstrapped test statistic")
}))
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_statistic_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
names(bbb)
bbb$observed
bbb$p_value
?kernel_statistic_fn
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
example_data
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
Psi = 2 * kinship_fn(ped_object)
genotype = geno_object[, -1]
p_hat = p_hat_fn(genotype)
r_hat = r_hat_fn(genotype)
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
kkk = genotype %*% WWW %*% t(genotype)
quad_kkk = 1 + 2*kkk + kkk%*%kkk
quad_kernel = t(uuu)%*%quad_kernel%*%uuu
quad_kernel = t(uuu)%*%quad_kkk%*%uuu
quad_kernel
177.12/57.2
dim(kkk)
dim(kkk%*%kkk)
kkk = genotype %*% WWW %*% t(genotype)
quad_kkk = (1 + kkk) %*% (1 + kkk)
quad_kernel = t(uuu)%*%quad_kkk%*%uuu
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
quad_kernel
kkk[1:5,1:5]
kkk
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quadk = matrix(nrow=20,ncol=20)
for(i in 1:20){
for(j in 1:20){
quadk = matrix(nrow=20,ncol=20)
}
}
quadk
quadk = matrix(nrow=20,ncol=20)
quadk = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quadk
quad_kernel = t(uuu)%*%quad_kkk%*%uuu
quad_kernel
quad_kernel = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j] = (1+sum(genotype[]))
dim(genotype)
i=1
j=1
quadk[i,j] = (1+sum(t(genotype[i,])*genotype[j,]))^2
quadk[i,j]
genotype[i,]
genotype[j,]
t(genotype[i,])*genotype[j,])
t(genotype[i,])*genotype[j,]
for(i in 1:20){
for(j in 1:20){
quadk[i,j] = (1+sum(t(genotype[i,])*genotype[j,]))^2
}
}
quadk
t(uuu)%*%quadk%*%uuu
> quadk = matrix(nrow=20,ncol=20,0)
> for(i in 1:20){
+ for(j in 1:20){
+ quadk[i,j]=(1+kkk[i,j])^2
+ }
+ }
quadk = matrix(nrow=20,ncol=20,0)
> for(i in 1:20){
+ for(j in 1:20){
+ quadk[i,j]=(1+kkk[i,j])^2
+ }
+ }
quadk = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quad_kernel = t(uuu)%*%quadk%*%uuu
quad_kernel
kkk = genotype %*% WWW %*% t(genotype)
quadk = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quad_kernel = t(uuu)%*%quadk%*%uuu
quad_kernel
quadratic_kernel_statistic_fn = function(
genotype, ped_object, Psi, p_hat, r_hat, map_object
){
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
kkk = genotype %*% WWW %*% t(genotype)
quadk = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quad_kernel = t(uuu)%*%quadk%*%uuu
attributes(quad_kernel) = NULL
list(
statistic = quad_kernel
)
}
quadratic_kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
dim(genoall)
dim(genotype)
kkk = genotype %*% WWW %*% t(genotype)
quadk = matrix(nrow=20,ncol=20,0)
for(i in 1:20){
for(j in 1:20){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quad_kernel = t(uuu)%*%quadk%*%uuu
quad_kernel
quadratic_kernel_statistic_fn = function(
genotype, ped_object, Psi, p_hat, r_hat, map_object
){
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
kkk = genotype %*% WWW %*% t(genotype)
quadk = matrix(nrow=nrow(kkk),ncol=nrow(kkk),0)
for(i in 1:nrow(kkk)){
for(j in 1:nrow(kkk)){
quadk[i,j]=(1+kkk[i,j])^2
}
}
quad_kernel = t(uuu)%*%quadk%*%uuu
attributes(quad_kernel) = NULL
list(
statistic = quad_kernel
)
}
quadratic_kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
library("bindata")
library("matrixcalc")
r=c(0,0.5,0.96)              # inter marker correlation same, 3 scenarios
maf=c(0.05,0.1)     # CHANGE maf[1]=0.01 maf same for all markers, 3 scenarios
marker=2        # CHANGE NUMBER OF MARKERS
ppp=maf[2]
qqq = 1 - ppp
rrr=r[3]
asp=500
ctl=1000
diagmat=diag(1,nrow=marker,ncol=marker)   # m1 and m changes with number of markers, here it is$
unitmat=matrix(1,ncol=marker,nrow=marker)
diag(unitmat)=0
rho=diagmat+rrr*unitmat
m1=diag(ppp,nrow=marker,ncol=marker)    # CHANGE TO 50
m=matrix(1,ncol=marker,nrow=marker)     # CHANGE TO 50
diag(m)=0
## calculation of p(h1=h2=1) from bahadur's model
pHFn = function(hhh){
ttt = (hhh - ppp) * (ppp * qqq)^(-0.5)
termOne = prod(ppp^hhh)
termTwo = prod(qqq^(1 - hhh))
tProducts = ttt %o% ttt
termThree = 1 + rrr * sum(tProducts[upper.tri(tProducts)])
termOne * termTwo * termThree
}
hUni2 = expand.grid(h1 = 0:1, h2 = 0:1)
pH2 = apply(hUni2, 1, pHFn)
pdfH2 = cbind(hUni2, p = pH2)
phap=m1+pdfH2[4,3]*m
genopairs=NULL
phenopairs=NULL
#beta=rep(log(1.2),length=marker)    # CHANGE TO 50
#beta=c(rep(log(1.5),times=marker/2),rep(0,times=marker/2))
beta=rep(0,length=marker)
countpairs=0
while(countpairs<asp){          # 5 ASPs, CHANGE TO 500
h=rmvbin(4,commonprob=phap)
dad=h[1:2,]
mom=h[3:4,]
kid1=rbind(dad[sample(1:2,1),],mom[sample(1:2,1),])
geno1=colSums(kid1)
kid2=rbind(dad[sample(1:2,1),],mom[sample(1:2,1),])
geno2=colSums(kid2)
p1=exp(t(beta)%*%(geno1))/(1+exp(t(beta)%*%(geno1)))    # sib 1 prob
pheno1=rbinom(1,1,p1)                   # sib 1 phenotype
p2=exp(t(beta)%*%(geno2))/(1+exp(t(beta)%*%(geno2)))
pheno2=rbinom(1,1,p2)
if(pheno1==1 & pheno2==1){
genosib=cbind(geno1,geno2)
phenosib=c(1,1)
genopairs=cbind(genopairs,genosib)
phenopairs=c(phenopairs,phenosib)
countpairs=countpairs+1
}
}
r=c(0,0.5,0.96)              # inter marker correlation same, 3 scenarios
maf=c(0.05,0.1)     # CHANGE maf[1]=0.01 maf same for all markers, 3 scenarios
marker=10       # CHANGE NUMBER OF MARKERS
ppp=maf[1]
qqq = 1 - ppp
rrr=r[1]
asp=5
ctl=10
takeseed=read.table("takeseed.txt")
set.seed(as.numeric(takeseed[1,1]))
diagmat=diag(1,nrow=marker,ncol=marker)   # m1 and m changes with number of markers, here it is$
unitmat=matrix(1,ncol=marker,nrow=marker)
diag(unitmat)=0
rho=diagmat+rrr*unitmat
m1=diag(ppp,nrow=marker,ncol=marker)    # CHANGE TO 50
m=matrix(1,ncol=marker,nrow=marker)     # CHANGE TO 50
diag(m)=0
## calculation of p(h1=h2=1) from bahadur's model
pHFn = function(hhh){
ttt = (hhh - ppp) * (ppp * qqq)^(-0.5)
termOne = prod(ppp^hhh)
termTwo = prod(qqq^(1 - hhh))
tProducts = ttt %o% ttt
termThree = 1 + rrr * sum(tProducts[upper.tri(tProducts)])
termOne * termTwo * termThree
}
hUni2 = expand.grid(h1 = 0:1, h2 = 0:1)
pH2 = apply(hUni2, 1, pHFn)
pdfH2 = cbind(hUni2, p = pH2)
phap=m1+pdfH2[4,3]*m                 # from Bahadur's model
genopairs=NULL
phenopairs=NULL
#beta=rep(log(1.2),length=marker)    # CHANGE TO 50
#beta=c(rep(log(1.5),times=marker/2),rep(0,times=marker/2))
beta=rep(0,length=marker)
countpairs=0
while(countpairs<asp){          # 5 ASPs, CHANGE TO 500
h=rmvbin(4,commonprob=phap)
dad=h[1:2,]
mom=h[3:4,]
kid1=rbind(dad[sample(1:2,1),],mom[sample(1:2,1),])
geno1=colSums(kid1)
kid2=rbind(dad[sample(1:2,1),],mom[sample(1:2,1),])
geno2=colSums(kid2)
p1=exp(t(beta)%*%(geno1))/(1+exp(t(beta)%*%(geno1)))    # sib 1 prob
pheno1=rbinom(1,1,p1)                   # sib 1 phenotype
p2=exp(t(beta)%*%(geno2))/(1+exp(t(beta)%*%(geno2)))
pheno2=rbinom(1,1,p2)
if(pheno1==1 & pheno2==1){
genosib=cbind(geno1,geno2)
phenosib=c(1,1)
genopairs=cbind(genopairs,genosib)
phenopairs=c(phenopairs,phenosib)
countpairs=countpairs+1
}
}
ctlgeno=NULL
controls=0
ctlpheno=NULL
while(controls<ctl){            # 10 controls
h=rmvbin(2,commonprob=phap)             # haplotype generation for the control
geno=colSums(h)                         # genotype from haplotype
p=exp(t(beta)%*%(geno))/(1+exp(t(beta)%*%(geno)))    # probability of being aff$
pheno=rbinom(1,1,p)                   # phenotype
if(pheno==0){
ctlgeno=cbind(ctlgeno,geno)
ctlpheno=c(ctlpheno,pheno)
controls=controls+1
}
}
genoall=cbind(genopairs,ctlgeno)
genoall=t(genoall)
mafest = colMeans(genoall)/2
### centering the genotype matrix
genoall=genoall-2*mafest
rhoest = cor(genoall)
# phenotype
phenoall=c(phenopairs,ctlpheno)
w=rep(1,times=marker)
WWW = diag(1, nrow = marker, ncol = marker)
C=matrix(nrow=ncol(genoall),ncol=ncol(genoall))
for(i in 1:ncol(genoall)){
for(j in 1:ncol(genoall)){
C[i,j]=2*w[i]*w[j]*rhoest[i,j]*sqrt(mafest[i]*(1-mafest[i])*mafest[j]*(1-mafest[j]))
}
}
cs=sum(C)
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_statistic_fn,
mb = mb_statistic_fn,
quadkernel = quadratice_kernel_statistic_fn)
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_statistic_fn,
mb = mb_statistic_fn,
quadkernel = quadratic_kernel_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
names(bbb)
bbb$observed
bbb$p_value
