library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
example(kernel_fn)
kernel_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)$statistic
example(mb_statistic_fn)
#'  data(example_data)
#' genotype = geno_object[,2:ncol(geno_object)]
#' Psi = 2*kinship(ped_object)
Psi = 2*kinship(ped_object)
example(mb_statistic_fn)
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
example("mb_statistic_fn")
Psi = 2*kinship_fn(ped_object)
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
?mb_statistic_fn
library(amritaPackage, lib.loc = "~/R")
?mb_statistic_fn
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
?mb_statistic_fn
example("mb_statistic_fn")
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
Psi = 2 * kinship_fn(ped_object)
keep_q = !is.na(ped_object$case_control)
genotype = genotype[keep_q, ]
ped_object = ped_object[keep_q, ]
Psi = Psi[keep_q, keep_q]
p_hat = p_hat_fn(genotype)
r_hat = r_hat_fn(genotype)
observed = data.frame(t(sapply(names(test_statistic_fns), function(name){
test_statistic_fn = test_statistic_fns[[name]]
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, ...)$statistic
})))
test_statistic_fns="burden"
observed = data.frame(t(sapply(names(test_statistic_fns), function(name){
test_statistic_fn = test_statistic_fns[[name]]
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, ...)$statistic
})))
observed
test_statistic_fn
names(test_statistic_fns)
test_statistic_fns = list(
burden = burden_statistic_fn)
names(test_statistic_fns)
test_statistic_fn = test_statistic_fns[[name]]
test_statistic_fn = test_statistic_fns[[burden]
]
names(test_statistic_fns)
test_statistic_fns[[names(test_statistic_fns)]]
?burden_statistic_fn
test_statistic_fn = test_statistic_fns[[names(test_statistic_fns)]]
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, ...)$statistic
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, ...)
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, map_object)
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, map_object)$statistic
LLL = t(chol(Psi))
L_inverse = solve(LLL)
genotype_centered = genotype - rep(1, nrow(genotype)) %*% t(2 * p_hat)
AAA = L_inverse %*% as.matrix(genotype_centered)
1:N_bootstrap_reps,
NNN = nrow(AAA)
indices = sample(1:NNN, size=NNN, replace=TRUE)
A_b = AAA[indices,]
genotype_b = LLL %*% A_b
test_statistic_fn(genotype_b, ped_object, Psi, p_hat, r_hat, ...)$statistic
test_statistic_fn(genotype_b, ped_object, Psi, p_hat, r_hat, map_object)$statistic
test_statistic_fn(genotype_b, ped_object, Psi, p_hat, r_hat, map_object)$statistic
test_statistic_fns = list(
kernel = kernel_statistic_fn
)
test_statistic_fn = test_statistic_fns[[names(test_statistic_fns)]]
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, ...)$statistic
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, map_object)$statistic
test_statistic_fn(genotype, ped_object, Psi, p_hat, r_hat, map_object)
## checking kernel_statistic_fn function ##
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
kernel = t(zzz) %*% zzz
attributes(kernel) = NULL
cov_z = ( t(uuu) %*% Psi %*% uuu )[1, 1] * CCC
e_t = matrix.trace(cov_z)
var_t = 2 * matrix.trace(cov_z %*% cov_z)
delta = var_t / (2 * e_t)
degrees_freedom = 2 * e_t^2 / var_t
chi_square = kernel / delta
attributes(chi_square) = NULL
list(
statistic = chi_square,
degrees_freedom = degrees_freedom)
example(kernel_statistic_fn)
?(kernel_statistic_fn)
?kernel_statistic_fn
example(kernel_statistic_fn)
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
ls(2)
data(example_data)
N_bootstrap_reps = 1000
ped_object
geno_object
map_object
genotype = geno_object[, 2:ncol(geno_object)]
test_statistic_fns = list(
burden = burden_statistic_fn,
kernel = kernel_statistic_fn,
mb = mb_statistic_fn)
bbb = bootstrap_fn(N_bootstrap_reps, genotype, ped_object, test_statistic_fns, map_object)
example(kernel_statistic_fn)
kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)$statistic
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
kernel = t(zzz) %*% zzz
attributes(kernel) = NULL
cov_z = ( t(uuu) %*% Psi %*% uuu )[1, 1] * CCC
e_t = matrix.trace(cov_z)
var_t = 2 * matrix.trace(cov_z %*% cov_z)
delta = var_t / (2 * e_t)
degrees_freedom = 2 * e_t^2 / var_t
chi_square = kernel / delta
attributes(chi_square) = NULL
list(
statistic = chi_square,
degrees_freedom = degrees_freedom)
?kernel_statistic_fn
## again checking burden ##
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
xi = weight %*% t(genotype)
chi_square = ( uuu %*% t(xi) )^2 / ( cs * t(uuu) %*% Psi %*% uuu )
attributes(chi_square) = NULL
list(
statistic = chi_square,
degrees_freedom = 1)
burden_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
kernel = t(zzz) %*% zzz
attributes(kernel) = NULL
cov_z = ( t(uuu) %*% Psi %*% uuu )[1, 1] * CCC
e_t = matrix.trace(cov_z)
var_t = 2 * matrix.trace(cov_z %*% cov_z)
delta = var_t / (2 * e_t)
degrees_freedom = 2 * e_t^2 / var_t
chi_square = kernel / delta
attributes(chi_square) = NULL
attributes(degrees_freedom) = NULL
list(
statistic = chi_square,
degrees_freedom = degrees_freedom)
}
kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
library(amritaPackage, lib.loc = "~/R")
?kernel_statistic_fn
?kernel_statistic_fn
library(roxyPackage)
pck.description = data.frame(
Package = "amritaPackage",
Type = "Package",
Title = "Quasi-bootstrap association tests",
Author = "Amrita Ray <amray@stanford.edu>",
AuthorsR = "c(person(given=\"Amrita\", family=\"Ray\",
email=\"amray@stanford.edu\", role=c(\"aut\", \"cre\")))",
Maintainer = "Amrita Ray <amray@stanford.edu>",
Depends = "R (>= 2.10.0), kinship2, matrixcalc",
Description = "Provides quasi-bootstrap p-values for provided and user-provided tests.",
License = "GPL (>= 3)",
Encoding = "UTF-8",
LazyLoad = "yes",
URL = "http://stanford.edu/~amray/thepackage/index.html",
stringsAsFactors = FALSE)
roxy.package(
pck.source.dir = "amritaPackage",
pck.version = "0.01-1",
R.libs = "~/R",
repo.root = "repo",
pck.description = pck.description,
actions = c(
"roxy",
"cite",
"doc",
"html",
"license",
"log",
"win",
"macosx",
"package"),
ChangeLog = list(
edited = c("I added Windows version"))
)
?kernel_statistic_fn
?burden_statistic_fn
library(amritaPackage, lib.loc = "~/R")
?kernel_statistic_fn
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
kernel = t(zzz) %*% zzz
attributes(kernel) = NULL
cov_z = ( t(uuu) %*% Psi %*% uuu )[1, 1] * CCC
e_t = matrix.trace(cov_z)
var_t = 2 * matrix.trace(cov_z %*% cov_z)
delta = var_t / (2 * e_t)
degrees_freedom = 2 * e_t^2 / var_t
data(example_data)
case_control = ped_object$case_control
uuu = case_control - mean(case_control)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
genotype = geno_object[,2:ncol(geno_object)]
Psi = 2*kinship_fn(ped_object)
p_hat = p_hat_fn(genotype)
r_hat=r_hat_fn(genotype)
weight = weight_fn(map_object, p_hat)
CCC = C_fn(map_object, p_hat, r_hat)
cs = sum(CCC)
genotype = as.matrix(genotype)
MMM = ncol(genotype)
WWW = diag(weight, nrow = MMM, ncol = MMM)
zzz = sqrt(WWW) %*% t(genotype) %*% uuu
kernel = t(zzz) %*% zzz
attributes(kernel) = NULL
cov_z = ( t(uuu) %*% Psi %*% uuu )[1, 1] * CCC
e_t = matrix.trace(cov_z)
var_t = 2 * matrix.trace(cov_z %*% cov_z)
delta = var_t / (2 * e_t)
degrees_freedom = 2 * e_t^2 / var_t
chi_square = kernel / delta
attributes(chi_square) = NULL
attributes(degrees_freedom) = NULL
list(
statistic = chi_square,
degrees_freedom = degrees_freedom)
kernel_statistic_fn(genotype,ped_object, Psi, p_hat, r_hat, map_object)
